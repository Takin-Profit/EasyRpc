import idl "foo.avdl";
/*
* Header with license information.
*/

/**
 * An example protocol in Avro IDL
 */
protocol Simple {
  /** Documentation for the enum type Kind */
  enum Kind {
    FOO,
    BAR, // the bar enum value
    BAZ
  } = FOO; // For schema evolution purposes, unmatched values do not throw an error, but are resolved to FOO.


  record TestRecord {
    /** Record name; has no intrinsic order */
    string name;

    Kind kind;

    /** A nullable field.
    Note that 'null' is the first union type. Just like .avsc / .avpr files, the default value must be of the first union type.
    */
    union {null, string} nullableHash = null;

    array<long> arrayOfLongs;
  }

  /** Errors are records that can be thrown from a method */
  error TestError {
    string message;
  }

  string hello(string greeting);
  /** Return what was given. Demonstrates the use of backticks to name types/fields/messages/parameters after keywords */
  TestRecord echo(TestRecord `record`);
  /** |GET| Add two numbers */
  int add(int arg1, int arg2);
  bytes echoBytes(bytes data);
  union {string, TestError} `error`();
  // The oneway keyword forces the method to return null.
  void ping() oneway;
}
